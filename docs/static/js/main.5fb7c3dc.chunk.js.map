{"version":3,"sources":["components/PetComponent.js","App.js","serviceWorker.js","index.js"],"names":["PetComponent","props","useState","petsReceived","setPetsReceived","species","onClick","event","console","log","target","style","color","alert","noise","pets_ara","App","response_pets_ara","j","pet","push","key","makePets","map","i","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQAoEeA,EArCM,SAAAC,GAAS,MAQYC,mBAAS,GARrB,mBAQrBC,EARqB,KAQPC,EARO,KAyB5B,OAEE,kCACE,oCAAWH,EAAMI,QAAjB,KACA,4BAAQC,QAlBI,SAAAC,GACdC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAMG,QAClBH,EAAMG,OAAOC,MAAb,gBAAyCV,EAAMW,MAI/CC,MAAM,WAAD,OAAYZ,EAAMI,QAAlB,iBAAkCJ,EAAMa,MAAxC,SACLD,MAAM,WAAD,OAAYZ,EAAMI,QAAlB,4BAA6CF,EAA7C,aAELC,EAAiBD,EAAe,KAQ9B,WAAsCF,EAAMI,WClD5CU,EAAW,CACf,CAAEV,QAAS,QAAWS,MAAO,gBAAuBF,MAAO,cAC3D,CAAEP,QAAS,SAAWS,MAAO,sBAAuBF,MAAO,SAC3D,CAAEP,QAAS,UAAWS,MAAO,eAAuBF,MAAO,W,IAoE9CI,E,iLAxCX,OACE,6BAEE,0CAvCK,SAuCL,gBAIA,kBAAC,EAAD,CAAcX,QAAQ,QAAQS,MAAM,gBAAgBF,MAAM,eAC1D,kBAAC,EAAD,CAAcP,QAAQ,SAASS,MAAM,sBAAqBF,MAAM,UAChE,kBAAC,EAAD,CACEP,QAAQ,UACRS,MAAM,eACNF,MAAM,WApChB,WAEE,IAAMK,EAAoB,GACtBC,EAAI,GAHU,uBAKlB,YAAgBH,EAAhB,+CAA0B,CAAC,IAAlBI,EAAiB,QACxBF,EAAkBG,KAChB,kBAAC,EAAD,CACEC,IAAKH,EACLb,QAASc,EAAId,QACbS,MAAOK,EAAIL,MACXF,MAAOO,EAAIP,SAGfM,KAdgB,kFAiBlB,OADAV,QAAQC,IAAIQ,GACLA,EAyBCK,GAMAP,EAASQ,KAAK,SAACJ,EAAKK,GAAN,OACZ,kBAAC,EAAD,CACEH,IAAKG,EACLnB,QAASc,EAAId,QACbS,MAAOK,EAAIL,MACXF,MAAOO,EAAIP,gB,GAhCPa,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.5fb7c3dc.chunk.js","sourcesContent":["import React, {Component, useState} from 'react';\n\n// Change a class component into a functional component !\n// class PetComponent extends Component {\n\n//   pet_fun = event => {\n\n//     console.log(event);   // Synthetic event\n//     console.log(event.target);\n//     event.target.style[\"backgroundColor\"] =  this.props.color ;\n//     //event.target.style.color = \"white\";\n    \n//     alert(`*** The ${this.props.species} says ${this.props.noise} ***`);\n    \n//   }\n\n\n//   render() {\n\n//     return (\n//       <fieldset>\n//         <legend> { this.props.species } </legend>\n//         <button onClick={ this.pet_fun }>Pet the { this.props.species }</button>\n//       </fieldset>\n\n//     );\n//   }\n\n// } // Pet_component ***\n\n\nconst PetComponent = props => {\n\n  // useState is a Hook function that will give back an array\n  // The array contains a primitive variable or an object\n  // depending how we initialize it\n  // and also will give back a function to update the state.\n  // (the primitive variable or an object).\n\n  const [petsReceived, setPetsReceived] = useState(1);\n\n\n  const pet_fun = event => {\n    console.log(event);         // Synthetic event\n    console.log(event.target);\n    event.target.style[\"backgroundColor\"] =  props.color ;\n    //event.target.style.color = \"white\";\n\n    \n    alert(`*** The ${props.species} says ${props.noise} ***`);\n    alert(`*** THe ${props.species} has been petted ${petsReceived} time(s)`);\n    \n    setPetsReceived( petsReceived + 1);\n  }\n\n\n  return(\n\n    <fieldset>\n      <legend> { props.species } </legend>\n      <button onClick={ pet_fun }>Pet the { props.species }</button>\n    </fieldset>\n  \n  );\n\n} // PetComponent functional component ***\n\n\nexport default PetComponent;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport PetComponent from './components/PetComponent';\n\n\nconst name = \"Andrew\";\n// App can receive a prop from the file: index.js !\n// then change the line App to App(props)\n\n\nconst pets_ara = [\n  { species: 'Dingo',   noise: 'noise awooooo',       color: 'darkorange' },\n  { species: 'Turtle',  noise: 'noise eating grapes', color: 'olive' },\n  { species: 'Penguin', noise: 'noise kikiki',        color: 'yellow' }\n];\n\n\nfunction makePets() {\n\n  const response_pets_ara = [];\n  let j = 10;\n\n  for (let pet of pets_ara) {\n    response_pets_ara.push(\n      <PetComponent\n        key={j}\n        species={pet.species} \n        noise={pet.noise}\n        color={pet.color}\n      />\n    );\n    j++;\n  }\n  console.log(response_pets_ara);\n  return response_pets_ara;\n}\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n\n        <h2>Welcome to {name}'s petshop !</h2>\n\n        {/* *** way 1 *** */}\n\n        <PetComponent species='Dingo' noise='noise awooooo' color='darkorange'/>\n        <PetComponent species='Turtle' noise='noise eating grapes'color='olive'/>\n        <PetComponent \n          species='Penguin' \n          noise='noise kikiki' \n          color='yellow'\n        />\n\n        {/* *** way 2 *** */}\n\n        {\n          makePets()\n        }\n\n        {/* *** way 3 *** */}\n\n        {\n          pets_ara.map( (pet, i) => \n            <PetComponent \n              key={i}\n              species={pet.species} \n              noise={pet.noise}\n              color={pet.color}\n          />\n          )\n        }\n\n      </div>\n    );\n  }\n} // App ***\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}